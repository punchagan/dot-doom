:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+PROPERTY: header-args:emacs-lisp :tangle config.el
#+PROPERTY: header-args :mkdirp yes :comments no
#+STARTUP: fold indent
:END:

#+TITLE: A literate Emacs configuration using Doom Emacs
#+DESCRIPTION: This file contains my Emacs configuration as a literate program, which is generated by tangling this document.

This is my Doom Emacs configuration. From this org file, all the necessary Doom
Emacs config files are generated.

This file is written in literate programming style using [[https://orgmode.org/][org-mode]]. See [[file:init.el][init.el]],
[[file:packages.el][packages.el]] and [[file:config.el][config.el]] for the generated files.

Over the years, I have looked at a bunch of different Emacs configurations and
picked snippets from everywhere. This ~doom.org~ file's basic structure is
inspired by Diego Zamboni's [[https://github.com/zzamboni/dot-doom][configuration]].

* Doom config file overview

Doom Emacs uses three config files:

- =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom
  module is a bundle of packages, configuration and commands, organized into a
  unit that can be toggled easily from this file.
- =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that
  are installed and loaded as part of the enabled modules.
- =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

There are other files that can be loaded, but these are the main ones. The load
order of different files is [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#load-order][defined depending on the type of session]] being
started.

All the config files are generated from this Org file, to try and make its
meaning as clear as possible. All =package!= declarations are written to
=packages.el=, all other ~elisp~ code is written to =config.el=.

** Config file headers

We start by simply defining the standard headers used by the three files. These
headers come from the initial files generated by =doom install=, and contain
either some Emacs-LISP relevant indicators like =lexical-binding=, or
instructions about the contents of the file.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
  ;;; init.el -*- lexical-binding: t; -*-

  ;;; DONOT EDIT THIS FILE DIRECTLY
  ;;; Generated from doom.org using org-babel-tangle

  ;; This file controls what Doom modules are enabled and what order they load
  ;; in. Remember to run 'doom sync' after modifying it!

  ;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
  ;;      documentation. There you'll find a link to Doom's Module Index where all
  ;;      of our modules are listed, including what flags they support.

  ;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
  ;;      'C-c c k' for non-vim users) to view its documentation. This works on
  ;;      flags as well (those symbols that start with a plus).
  ;;
  ;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
  ;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
  ;; -*- no-byte-compile: t; -*-
  ;;; $DOOMDIR/packages.el

  ;;; DONOT EDIT THIS FILE DIRECTLY
  ;;; Generated from doom.org using org-babel-tangle

  ;; To install a package with Doom you must declare them here and run 'doom sync'
  ;; on the command line, then restart Emacs for the changes to take effect -- or
  ;; use 'M-x doom/reload'.


  ;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
  ;; (package! some-package)

  ;; To install a package directly from a remote git repo, you must specify a
  ;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
  ;; https://github.com/radian-software/straight.el#the-recipe-format
  ;; (package! another-package
  ;;   :recipe (:host github :repo "username/repo"))

  ;; If the package you are trying to install does not contain a PACKAGENAME.el
  ;; file, or is located in a subdirectory of the repo, you'll need to specify
  ;; `:files' in the `:recipe':
  ;; (package! this-package
  ;;   :recipe (:host github :repo "username/repo"
  ;;            :files ("some-file.el" "src/lisp/*.el")))

  ;; If you'd like to disable a package included with Doom, you can do so here
  ;; with the `:disable' property:
  ;; (package! builtin-package :disable t)

  ;; You can override the recipe of a built in package without having to specify
  ;; all the properties for `:recipe'. These will inherit the rest of its recipe
  ;; from Doom or MELPA/ELPA/Emacsmirror:
  ;; (package! builtin-package :recipe (:nonrecursive t))
  ;; (package! builtin-package-2 :recipe (:repo "myfork/package"))

  ;; Specify a `:branch' to install a package from a particular branch or tag.
  ;; This is required for some packages whose default branch isn't 'master' (which
  ;; our package manager can't deal with; see radian-software/straight.el#279)
  ;; (package! builtin-package :recipe (:branch "develop"))

  ;; Use `:pin' to specify a particular commit to install.
  ;; (package! builtin-package :pin "1a2b3c4d5e")


  ;; Doom's packages are pinned to a specific commit and updated from release to
  ;; release. The `unpin!' macro allows you to unpin single packages...
  ;; (unpin! pinned-package)
  ;; ...or multiple packages
  ;; (unpin! pinned-package another-pinned-package)
  ;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
  ;; (unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
  ;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

  ;;; DONOT EDIT THIS FILE DIRECTLY
  ;;; Generated from doom.org using org-babel-tangle

  ;; Place your private configuration here! Remember, you do not need to run 'doom
  ;; sync' after modifying this file!

  ;; Some functionality uses this to identify you, e.g. GPG configuration, email
  ;; clients, file templates and snippets. It is optional.
  ;; (setq user-full-name "John Doe"
  ;;       user-mail-address "john@doe.com")

  ;; Doom exposes five (optional) variables for controlling fonts in Doom:
  ;;
  ;; - `doom-font' -- the primary font to use
  ;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
  ;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  ;; - `doom-symbol-font' -- for symbols
  ;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
  ;;
  ;; See 'C-h v doom-font' for documentation and more examples of what they
  ;; accept. For example:
  ;;
  ;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
  ;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
  ;;
  ;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
  ;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
  ;; refresh your font settings. If Emacs still can't find your font, it likely
  ;; wasn't installed correctly. Font issues are rarely Doom issues!

  ;; There are two ways to load a theme. Both assume the theme is installed and
  ;; available. You can either set `doom-theme' or manually load a theme with the
  ;; `load-theme' function. This is the default:
  ;; (setq doom-theme 'doom-one)

  ;; This determines the style of line numbers in effect. If set to `nil', line
  ;; numbers are disabled. For relative line numbers, set this to `relative'.
  ;; (setq display-line-numbers-type t)

  ;; If you use `org' and don't want your org files in the default location below,
  ;; change `org-directory'. It must be set before org loads!
  ;; (setq org-directory "~/org/")

  ;; Whenever you reconfigure a package, make sure to wrap your config in an
  ;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
  ;;
  ;;   (after! PACKAGE
  ;;     (setq x y))
  ;;
  ;; The exceptions to this rule:
  ;;
  ;;   - Setting file/directory variables (like `org-directory')
  ;;   - Setting variables which explicitly tell you to set them before their
  ;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  ;;   - Setting doom variables (which start with 'doom-' or '+').
  ;;
  ;; Here are some additional functions/macros that will help you configure Doom.
  ;;
  ;; - `load!' for loading external *.el files relative to this one
  ;; - `use-package!' for configuring packages
  ;; - `after!' for running code after a package has loaded
  ;; - `add-load-path!' for adding directories to the `load-path', relative to
  ;;   this file. Emacs searches the `load-path' when you load packages with
  ;;   `require' or `use-package'.
  ;; - `map!' for binding new keys
  ;;
  ;; To get information about any of these functions/macros, move the cursor over
  ;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
  ;; This will open documentation for it, including demos of how they are used.
  ;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
  ;; etc).
  ;;
  ;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
  ;; they are implemented.
#+end_src
#+html: </details>

** Customized variables

Doom [[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#configure][does not recommend the Emacs =customize= mechanism]].

All necessary settings are therefore set by hand as part of this configuration
file. The only exceptions are "safe variable" and "safe theme" settings, which
are automatically saved by Emacs in =custom.el=, but this is OK as they don't
conflict with anything else from the config.

** Better tangled file generation
:PROPERTIES:
:CUSTOM_ID: my-make-init-el-function
:END:

We genarate the different configuration files (like ~init.el~, ~config.el~,
~packages.el~, etc.), whenever this file gets saved. We need to save with a
prefix argument, though. ~C-u C-x C-s~.

#+name: tangle-file-generation
#+begin_src emacs-lisp
  (defun pc/tangle-doom-org ()
    "Tangle the file to update doom config files."
    (interactive "P")
    (let* ((time (current-time))
           (org-babel-tangle-comment-format-beg "%source-name starts here"))
      (when current-prefix-arg
        ;; Make and load init.el
        (org-babel-tangle)
        ;; Acknowledgement
        (message
         "Tangled config.el,init.el,packages.el, … %.06f seconds."
         (float-time (time-since time))))))
#+end_src
* Doom modules

This code is written to the =init.el= to select which modules to load. Written
here as-is for now, as it is quite well structured and clear.

#+begin_src emacs-lisp :tangle init.el
  (doom! :input
         ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
         ;;chinese
         ;;japanese
         ;;layout            ; auie,ctsrnm is the superior home row

         :completion
         company           ; the ultimate code completion backend
         ;;(corfu +orderless)  ; complete with cap(f), cape and a flying feather!
         ;;helm              ; the *other* search engine for love and life
         ;;ido               ; the other *other* search engine...
         ivy               ; a search engine for love and life
         vertico           ; the search engine of the future

         :ui
         ;;deft              ; notational velocity for Emacs
         doom              ; what makes DOOM look the way it does
         doom-dashboard    ; a nifty splash screen for Emacs
         doom-quit         ; DOOM quit-message prompts when you quit Emacs
         (emoji +unicode)  ; 🙂
         hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
         ;;hydra
         ;;indent-guides     ; highlighted indent columns
         ;;ligatures         ; ligatures and symbols to make your code pretty again
         ;;minimap           ; show a map of the code on the side
         modeline          ; snazzy, Atom-inspired modeline, plus API
         ;;nav-flash         ; blink cursor line after big motions
         ;;neotree           ; a project drawer, like NERDTree for vim
         ophints           ; highlight the region an operation acts on
         (popup +defaults)   ; tame sudden yet inevitable temporary windows
         ;;tabs              ; a tab bar for Emacs
         ;;treemacs          ; a project drawer, like neotree but cooler
         ;;unicode           ; extended unicode support for various languages
         (vc-gutter +pretty) ; vcs diff in the fringe
         vi-tilde-fringe   ; fringe tildes to mark beyond EOB
         ;;window-select     ; visually switch windows
         workspaces        ; tab emulation, persistence & separate workspaces
         ;;zen               ; distraction-free coding or writing

         :editor
         ;;(evil +everywhere); come to the dark side, we have cookies
         file-templates    ; auto-snippets for empty files
         fold              ; (nigh) universal code folding
         (format +onsave)  ; automated prettiness
         ;;god               ; run Emacs commands without modifier keys
         ;;lispy             ; vim for lisp, for people who don't like vim
         ;;multiple-cursors  ; editing in many places at once
         ;;objed             ; text object editing for the innocent
         ;;parinfer          ; turn lisp into python, sort of
         ;;rotate-text       ; cycle region at point between text candidates
         snippets          ; my elves. They type so I don't have to
         ;;word-wrap         ; soft wrapping with language-aware indent

         :emacs
         dired             ; making dired pretty [functional]
         electric          ; smarter, keyword-based electric-indent
         ;;ibuffer         ; interactive buffer management
         undo              ; persistent, smarter undo for your inevitable mistakes
         vc                ; version-control and Emacs, sitting in a tree

         :term
         ;;eshell            ; the elisp shell that works everywhere
         ;;shell             ; simple shell REPL for Emacs
         ;;term              ; basic terminal emulator for Emacs
         ;;vterm             ; the best terminal emulation in Emacs

         :checkers
         syntax              ; tasing you for every semicolon you forget
         ;;(spell +flyspell) ; tasing you for misspelling mispelling
         ;;grammar           ; tasing grammar mistake every you make

         :tools
         ansible
         ;;biblio            ; Writes a PhD for you (citation needed)
         ;;collab            ; buffers with friends
         ;;debugger          ; FIXME stepping through code, to help you add bugs
         ;;direnv
         docker
         editorconfig      ; let someone else argue about tabs vs spaces
         ;;ein               ; tame Jupyter notebooks with emacs
         (eval +overlay)     ; run code, run (also, repls)
         lookup              ; navigate your code and its documentation
         lsp               ; M-x vscode
         (magit +forge)             ; a git porcelain for Emacs
         make              ; run make tasks from Emacs
         ;;pass              ; password manager for nerds
         pdf               ; pdf enhancements
         ;;prodigy           ; FIXME managing external services & code builders
         ;;rgb               ; creating color strings
         ;;taskrunner        ; taskrunner for all your projects
         ;;terraform         ; infrastructure as code
         ;;tmux              ; an API for interacting with tmux
         ;;tree-sitter       ; syntax and parsing, sitting in a tree...
         ;;upload            ; map local to remote projects via ssh/ftp

         :os
         (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
         ;;tty               ; improve the terminal Emacs experience

         :lang
         ;;agda              ; types of types of types of types...
         ;;beancount         ; mind the GAAP
         ;;(cc +lsp)         ; C > C++ == 1
         ;;clojure           ; java with a lisp
         ;;common-lisp       ; if you've seen one lisp, you've seen them all
         ;;coq               ; proofs-as-programs
         ;;crystal           ; ruby at the speed of c
         ;;csharp            ; unity, .NET, and mono shenanigans
         ;;data              ; config/data formats
         ;;(dart +flutter)   ; paint ui and not much else
         ;;dhall
         ;;elixir            ; erlang done right
         ;;elm               ; care for a cup of TEA?
         emacs-lisp        ; drown in parentheses
         ;;erlang            ; an elegant language for a more civilized age
         ;;ess               ; emacs speaks statistics
         ;;factor
         ;;faust             ; dsp, but you get to keep your soul
         ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
         ;;fsharp            ; ML stands for Microsoft's Language
         ;;fstar             ; (dependent) types and (monadic) effects and Z3
         ;;gdscript          ; the language you waited for
         ;;(go +lsp)         ; the hipster dialect
         ;;(graphql +lsp)    ; Give queries a REST
         ;;(haskell +lsp)    ; a language that's lazier than I am
         ;;hy                ; readability of scheme w/ speed of python
         ;;idris             ; a language you can depend on
         json              ; At least it ain't XML
         ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
         javascript        ; all(hope(abandon(ye(who(enter(here))))))
         ;;julia             ; a better, faster MATLAB
         ;;kotlin            ; a better, slicker Java(Script)
         ;;latex             ; writing papers in Emacs has never been so fun
         ;;lean              ; for folks with too much to prove
         ;;ledger            ; be audit you can be
         ;;lua               ; one-based indices? one-based indices
         markdown          ; writing docs for people to ignore
         ;;nim               ; python + lisp at the speed of c
         ;;nix               ; I hereby declare "nix geht mehr!"
         (ocaml +lsp)               ; an objective camel
         (org +hugo +noter)         ; organize your plain life in plain text
         ;;php               ; perl's insecure younger brother
         ;;plantuml          ; diagrams for confusing people more
         ;;purescript        ; javascript, but functional
         python            ; beautiful is better than ugly
         ;;qt                ; the 'cutest' gui framework ever
         ;;racket            ; a DSL for DSLs
         ;;raku              ; the artist formerly known as perl6
         ;;rest              ; Emacs as a REST client
         ;;rst               ; ReST in peace
         ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
         ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
         ;;scala             ; java, but good
         ;;(scheme +guile)   ; a fully conniving family of lisps
         sh                ; she sells {ba,z,fi}sh shells on the C xor
         ;;sml
         ;;solidity          ; do you need a blockchain? No.
         ;;swift             ; who asked for emoji variables?
         ;;terra             ; Earth and Moon in alignment for performance.
         web               ; the tubes
         yaml              ; JSON, but readable
         ;;zig               ; C, but simpler

         :email
         ;;(mu4e +org +gmail)
         ;;notmuch
         ;;(wanderlust +gmail)

         :app
         ;;calendar
         ;;emms
         everywhere        ; *leave* Emacs!? You must be joking
         ;;irc               ; how neckbeards socialize
         ;;(rss +org)        ; emacs as an RSS reader
         ;;twitter           ; twitter client https://twitter.com/vnought

         :config
         ;;literate
         (default +bindings +smartparens))
#+end_src

* General configuration
** Basic user information
#+begin_src emacs-lisp
  (setq user-full-name    "Puneeth Chaganti"
        user-mail-address "punchagan@muse-amuse.in")
#+end_src

For some fun, run this cute method.
#+BEGIN_SRC emacs-lisp :tangle no
  (animate-birthday-present user-full-name)
#+END_SRC
** System specific configuration
#+begin_src emacs-lisp
  (pcase (system-name)
    ("haalbai" (setq pc/code-directory "~/code/"))
    ("chandrahara" (setq pc/code-directory "~/software/")))
#+end_src
** Use authinfo gpg file
#+BEGIN_SRC emacs-lisp
  (after! auth-source
          (setq auth-sources '("~/.authinfo.gpg")))
#+END_SRC
** Random Quote
Show a random quote when Emacs is idle for 5 minutes
#+BEGIN_SRC emacs-lisp
  (defun pc/get-random-quote ()
    (require 'json)
    (let ((json-array-type 'list)
          (quotes-file (expand-file-name "quotes.json" user-emacs-directory)))
      (when (file-exists-p quotes-file)
        (let* ((quotes (json-read-file quotes-file))
               (n (random (length quotes)))
               (q (nth n quotes))
               (text (cdr (assoc 'body q)))
               (source (cdr (assoc 'source q))))
          (format "%s — %s" text source)))))

  (unless (boundp 'pc/quotes-timer)
    (setq pc/quotes-timer
          (run-with-idle-timer
           300
           'repeat-forever
           (lambda () (message (pc/get-random-quote))))))
#+END_SRC
** Lean UI
#+BEGIN_SRC emacs-lisp
  ;; No startup message
  (setq inhibit-startup-message t)

  (setq-default
   initial-scratch-message
   (format ";; Happy hacking, %s - Emacs ♥ you!\n\n" user-login-name))

  ;; No tool-bar, menu-bar and scroll-bar
  (tool-bar-mode   -1)
  (menu-bar-mode   -1)
  (scroll-bar-mode -1)

  ;; More prominent window divider
  (window-divider-mode 1)
#+END_SRC
** Basic Preferences

Miscellaneous basic preferences for basic editor actions (foreground &
background).

#+BEGIN_SRC emacs-lisp
  ;; Basic preferences (taken from purcell)
  (setq-default
   bookmark-default-file (expand-file-name ".bookmarks.el" user-emacs-directory)
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   confirm-kill-emacs nil
   indent-tabs-mode nil
   create-lockfiles nil
   auto-save-default nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil
   truncate-partial-width-windows nil)
#+END_SRC

Some more basic preferences which are called in the ~after-init-hook~.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'delete-selection-mode)

  (add-hook 'after-init-hook 'global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)

  (add-hook 'after-init-hook 'transient-mark-mode)
#+END_SRC

Let's save a few precious seconds

#+begin_src emacs-lisp
;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; Enable all ‘possibly confusing commands’ such as helpful but
;; initially-worrisome “narrow-to-region”, C-x n n.
(setq-default disabled-command-function nil)
#+end_src
*** Use UTF-8
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8-unix)
#+end_src
** Themes
#+BEGIN_SRC emacs-lisp
  ;; Don't prompt to confirm theme safety. This avoids problems with
  ;; first-time startup on Emacs > 26.3.
  (setq custom-safe-themes t)
#+END_SRC

#+begin_src emacs-lisp
(setq doom-theme 'doom-solarized-dark)
#+end_src

** Fill column indicator
#+BEGIN_SRC emacs-lisp
  (when (boundp 'display-fill-column-indicator)
    (setq-default indicate-buffer-boundaries 'left)
    (setq-default display-fill-column-indicator-character ?│)
    (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode))
#+END_SRC

** Restore previous session
The following is disabled. I found it a nuisance to have my files open
across sessions. If I'm closing Emacs, it's for a good reason.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Keep open files open across sessions.
  (desktop-save-mode 1)
  (setq desktop-restore-eager 10)
#+END_SRC
** Large files

Install package to handle very large files

#+begin_src emacs-lisp :tangle packages.el
(package! vlf)
#+end_src

#+begin_src emacs-lisp
  (when (fboundp 'so-long-enable)
    (add-hook 'after-init-hook 'so-long-enable))

  (defun ffap-vlf ()
    "Find file at point with VLF."
    (interactive)
    (let ((file (ffap-file-at-point)))
      (unless (file-exists-p file)
        (error "File does not exist: %s" file))
      (vlf file)))
#+end_src

** Emacs backups

Emacs only saves backups on the first save, an not every save. One
could set ~buffer-backed-up~ to ~nil~ on the ~before-save-hook~, to
trigger a backup on each save.

There's also a ~backup-walker~ package that may be useful, if we are
into back-ups a lot. But, currently, almost everything that I work on,
is in ~git~ and it doesn't seem super useful to have so much setup for
backups.

#+BEGIN_SRC emacs-lisp
  ;; New location for backups.
  (setq backup-directory-alist
        `(("." . ,(expand-file-name "backups" user-emacs-directory))))

  ;; Silently delete execess backup versions
  (setq delete-old-versions t)

  ;; Only keep the last 3 backups of a file.
  (setq kept-old-versions 3)

  ;; Even version controlled files get to be backed up.
  (setq vc-make-backup-files t)

  ;; Use version numbers for backup files.
  (setq version-control t)
#+END_SRC

** Whitespace

Let's start off by cleaning-up any accidental trailing whitespace and
in other places upon save.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

See [[http://ergoemacs.org/emacs/whitespace-mode.html][here]] for making whitespace visible; including spaces, tabs, and
newlines

** Fill column
#+begin_src emacs-lisp
  (setq-default fill-column 79)
#+end_src
** Screenshots
Emacs can screenshot itself into an SVG.

Code from https://www.reddit.com/r/emacs/comments/idz35e/comment/g2c2c6y/

#+begin_src emacs-lisp
  (defun pc/screenshot-svg ()
    "Save a screenshot of the current frame as an SVG image.
  Saves to a temp file and puts the filename in the kill ring."
    (interactive)
    (let* ((filename (make-temp-file "Emacs" nil ".svg"))
           (data (x-export-frames nil 'svg)))
      (with-temp-file filename
        (insert data))
      (kill-new filename)
      (message filename)))

#+end_src
* Programming
** magit and git related stuff

For a full tutorial see [[http://jr0cket.co.uk/2012/12/driving-git-with-emacs-pure-magic-with.html.html][jr0cket's blog]].

#+BEGIN_SRC emacs-lisp
  (use-package! magit
    :bind
    ("C-x g" . magit-status)
    ("C-c b" . magit-blame)
    :custom
    ;; Show word diffs for current hunk
    (magit-diff-refine-hunk t)
    (magit-repository-directories `((,pc/code-directory . 3)
                                    ("~" . 0)
                                    ("~/.life-in-plain-text/" . 0)))
    ;; Do not ask about this variable when cloning.
    (magit-clone-set-remote.pushDefault t))
#+END_SRC

*** Git helpers
#+BEGIN_SRC emacs-lisp
  ;; Incremental blame?
  (use-package git-blamed
    :defer t)

  ;; Major mode for editing git configuration files
  (use-package git-modes
    :defer t)

  ;; Highlight diffs
  (use-package diff-hl
    :defer
    :config
    (global-diff-hl-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  ;; NOTE: DISABLED because I don't really like the pop-ups, and prefer magit blame!
  ;; M-x git-messenger:popup-message
  (use-package git-messenger
    :custom
    ;; Always show who authored the commit and when.
    (git-messenger:show-detail t)
    ;; Message menu let's us use magit diff to see the commit change.
    (git-messenger:use-magit-popup t))
#+END_SRC

*** Magit helpers
#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :config
    (setq magit-todos-exclude-globs '("*.css.map")))
#+END_SRC

*** GitHub helpers

Get links/browse the file/commit on GitHub.

#+begin_src emacs-lisp :tangle packages.el
;; Link to specific parts of a file
(package! git-link)
#+end_src

** Project management
*** Setup projectile
#+begin_src emacs-lisp
  (use-package! projectile
    :init
    (projectile-mode +1)
    :custom
    (projectile-project-search-path `((,pc/code-directory . 4)))
    (projectile-indexing-method 'alien)
    (projectile-sort-order 'recently-active)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src
*** Install ~ag~
#+begin_src emacs-lisp
  (use-package ag
    :defer t)
#+end_src

** Javascript
#+begin_src emacs-lisp
  (setq js-indent-level 2)
#+end_src
*** Prettier
#+begin_src emacs-lisp
  (defun pc/enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
            (funcall (cdr my-pair)))))

  (defun pc/disable-whitespace-cleanup ()
    "Set whitespace-style to nil locally."
    (interactive)
    (setq-local whitespace-style nil))

  (use-package prettier-js
    :defer t
    :config
    (add-hook 'js-mode-hook 'prettier-js-mode)
    (add-hook 'js-mode-hook #'pc/disable-whitespace-cleanup)
    (add-hook 'js-jsx-mode-hook 'prettier-js-mode)
    (add-hook 'js-jsx-mode-hook #'pc/disable-whitespace-cleanup)
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'js2-mode-hook #'pc/disable-whitespace-cleanup)
    (add-hook 'typescript-mode-hook 'prettier-js-mode)
    (add-hook 'typescript-mode-hook #'pc/disable-whitespace-cleanup)
    (add-hook 'web-mode-hook #'(lambda ()
                                 (pc/enable-minor-mode
                                  '("\\.jsx?\\'" . prettier-js-mode)))))
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :defer t)
#+end_src
** Python
*** Use anaconda mode for code completion, etc.
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :demand t
    :after python
    :hook ((python-mode . anaconda-mode)
           (python-mode . anaconda-eldoc-mode)))
#+END_SRC
*** Use autoflake to remove unused imports
#+BEGIN_SRC emacs-lisp
  (defun pc/autoflake-remove-unused-imports-before-save ()
    (interactive)
    (when (eq major-mode 'python-mode)
      (if (executable-find "autoflake")
          (progn
            (shell-command (format "autoflake --remove-all-unused-imports -i %s"
                                   (shell-quote-argument (buffer-file-name))))
            (revert-buffer t t t))
        (message "Error: Cannot find autoflake executable."))))

  ;; NOTE: The hook is added after py-isort hook has been added below

#+end_src

*** Use isort to sort imports
#+BEGIN_SRC emacs-lisp
  (defun pc/py-clean-up-imports-hook ()
    "Hooks that clean up python mode imports."
    ;; Hooks are added at the head of the before-save-hook list. So, hooks should
    ;; be added here in the reverse order in which they should be applied.
    (add-hook 'before-save-hook 'py-isort-before-save nil t)
    ;; The function is called on the file, and not buffer. So, we call it after saving the file
    (add-hook 'after-save-hook 'pc/autoflake-remove-unused-imports-before-save nil t))

  (use-package py-isort
    :demand t
    :after python
    :hook (python-mode . pc/py-clean-up-imports-hook))
#+END_SRC

*** Use black in Python buffers

#+begin_src emacs-lisp :tangle packages.el
  (package! blacken)
#+end_src

NOTE: This appears after the isort stuff above.. since we want blacken to be
the last thing to run!

#+begin_src emacs-lisp
  (use-package! blacken
    :demand t
    :after python
    :hook (python-mode . blacken-mode)
    :config
    (setq blacken-line-length 100))
#+end_src
*** Use poetry with poetry-tracking-mode
#+begin_src emacs-lisp :tangle packages.el
  (package! poetry)
#+end_src

#+begin_src emacs-lisp
  (use-package! poetry
    :demand t
    :after python
    :hook (python-mode . poetry-tracking-mode))
#+end_src
** Emacs Lisp
*** Generate README from file header
#+begin_src emacs-lisp :tangle packages.el
  (package! md-readme)
#+end_src
*** Package lint for submitting packages to melpa
#+begin_src emacs-lisp :tangle packages.el
  (package! package-lint)
#+end_src
** Reason & OCaml
*** Reason
#+begin_src emacs-lisp :tangle packages.el
(package! reason-mode)
#+end_src

#+begin_src emacs-lisp
(use-package! reason-mode
  :hook (reason-mode . setup-reason-mode)

  :config
  (defun setup-reason-mode ()
    "Setup function for Reason mode."
    ;; Enable merlin-mode for OCaml/ReasonML integration
    (merlin-mode)
    ;; Ensure that refmt is run before saving Reason files
    (add-hook 'before-save-hook #'refmt-before-save nil 'local)))
#+end_src
*** Dune format
#+begin_src emacs-lisp :tangle packages.el
(package! dune-format)
#+end_src

#+begin_src emacs-lisp
(use-package! dune-format
  :hook (dune-mode . dune-format-on-save-mode))
#+end_src
* Prose and Literate Programming
** Org mode
Some basic org-mode configuration

#+BEGIN_SRC emacs-lisp
  (use-package! org
    :bind (("C-c c" . org-capture)
           (:map org-mode-map
                 ("C-c C-q" . counsel-org-tag))))

  (setq org-directory "~/.life-in-plain-text/src/")
  (setq org-return-follows-link t)
#+END_SRC
*** Paste HTML as org text

Adapted from this [[https://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting][stackexchange]] post. There are also suggestions to use
~org-web-tools-read-url-as-org~. May be worth exploring

#+begin_src emacs-lisp
  (defun pc/html2org-clipboard ()
    "Convert clipboard contents from HTML to Org and then paste (yank)."
    (interactive)
    (kill-new (shell-command-to-string "xclip -o -t text/html | pandoc -f html -t org"))
    (yank))
#+end_src
** Org tags
#+BEGIN_SRC emacs-lisp
  (setq org-complete-tags-always-offer-all-agenda-tags t)
#+END_SRC

** Org Agenda and TODOs et al
*** Basic config
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files
        (expand-file-name "agenda-files.org" org-directory))

  ;; Enable a bunch of things, since we are going to use them, anyway..
  (require 'org-clock)
  (require 'org-agenda)
  (require 'org-capture)

  (setq org-enforce-todo-dependencies t)

  ;; Add a note whenever a task's deadline or scheduled date is changed.
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)

  ;; How many days early a deadline item will begin showing up in your agenda list.
  (setq org-deadline-warning-days 7)

  ;; In the agenda view, days that have no associated tasks will still have a line showing the date.
  (setq org-agenda-show-all-dates t)

  ;; Scheduled items marked as complete will not show up in your agenda view.
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
#+END_SRC
*** Super agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :defer t)

  (use-package org-ql
      :defer t)

  ;; FIXME: Add some filters and stuff to make it more useful?
#+END_SRC
*** What are you doing?
**** Template to capture journal entries
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("j"
                 "Journal"
                 entry
                 (file+olp+datetree "journal.org")
                 "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n%a\n"))
#+END_SRC
**** Custom code to fire off journal mode

#+begin_src emacs-lisp :tangle packages.el
(package! org-super-agenda)
#+end_src

#+BEGIN_SRC emacs-lisp
  (defun pc/journal (&optional mode)
    "Open a new frame for journaling.

  If MODE is 'journal opens to the current day in the journal, and
  creates a new day entry if not already present.

  If MODE is 'clock jumps to the currently clocked entry, or prompt
  one from the last few."
    (interactive)
    (pc/select-window-by-name "What are you doing?")
    ;; Display agenda...
    (org-agenda nil "a")
    (org-super-agenda-mode t)
    (org-agenda-log-mode t)
    (org-agenda-day-view)
    (org-agenda-goto-today)
    (delete-other-windows)
    (split-window-right)
    ;; Perform next action based on mode
    (cond
     ;; Show a capture buffer for a new journal entry
     ((equal mode 'journal)
      (org-capture nil "j"))
     ;; Show the current clock entry, if there's one. Otherwise prompt!
     ((equal mode 'clock)
      (org-clock-goto (not (org-clocking-p)))
      (org-narrow-to-subtree)
      (outline-show-subtree)
      (goto-char (buffer-end 1)))
     ;; Show today in the journal
     (t
      (org-capture-goto-target "j")
      (org-narrow-to-subtree))))

  (defun pc/get-frame-by-name (title)
    "Return frame with the given TITLE.
  If no such frame exists, creates a new frame."
    (or
     (car (filtered-frame-list
           (lambda (f)
             (string= title (cdr (assq 'title (frame-parameters f)))))))
     (make-frame
      `((title . ,title)
        (fullscreen . maximized)))))

  (defun pc/select-window-by-name (title)
    "Raise the window with the specified TITLE."
    (let ((frame (pc/get-frame-by-name title)))
      (select-frame frame)
      (shell-command (format "wmctrl -R \"%s\"" title))))
#+END_SRC
**** Work Today
Quickly create a summary of headlines tagged with specific tag


#+BEGIN_SRC emacs-lisp
  (defun pc/work-today ()
    "Create a journal entry with today's work tasks"
    (interactive)
    (let* ((date (format-time-string "%Y-%m-%d"))
           (title "Notes for Today")
           (org-last-tags-completion-table
            (org-global-tags-completion-table
             (org-agenda-files)))
           (tags
            (org-completing-read "Tags:" #'org-tags-completion-function))
           (headlines (org-ql-query
                        :select '(org-get-heading t t t t)
                        :from (org-agenda-files)
                        :where `(and (clocked :on ,date) (tags tags)))))

      ;; Exit early if no matching headlines
      (when (not headlines)
        (user-error "No matching headlines"))

      (when (org-clocking-p)
        (org-clock-out))
      (pc/journal)
      (end-of-buffer)
      (org-insert-heading-after-current)
      (insert title)
      (org-set-tags tags)
      (end-of-buffer)
      (mapc (lambda (item) (insert (format "- %s\n" (org-no-properties item)))) headlines)))

#+END_SRC
**** Org clock to Status
#+begin_src emacs-lisp
  (defun pc/current-task-to-status ()
    (interactive)
    (if (fboundp 'org-clocking-p)
        (if (org-clocking-p)
            (call-process "dconf" nil nil nil "write"
                          "/org/gnome/shell/extensions/simple-message/message"
                          (concat "'" (org-clock-get-clock-string) "'"))
          (call-process "dconf" nil nil nil "write"
                        "/org/gnome/shell/extensions/simple-message/message"
                        "'No active clock'"))))
  (run-with-timer 0 60 #'pc/current-task-to-status)
  (add-hook 'org-clock-in-hook #'pc/current-task-to-status)
  (add-hook 'org-clock-out-hook #'pc/current-task-to-status)
  (add-hook 'org-clock-cancel-hook #'pc/current-task-to-status)
  (add-hook 'org-clock-goto-hook #'pc/current-task-to-status)
#+end_src
** Org mode and Zulip
#+begin_src emacs-lisp :tangle packages.el
  (package! ox-gfm)

  (package! zulip-helpers
            :recipe (:local-repo "~/code/my-repos/zulip-helpers.el"))
#+end_src

*** Convert markdown from Zulip (or Slack or GitHub) to org
#+begin_src emacs-lisp
  (defun pc/zulip-to-org (begin end)
    (interactive "r")
    (when (use-region-p)
      (shell-command-on-region begin end "pandoc -r markdown -w org" t t)))
#+end_src
** Org capture
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
#+END_SRC
*** Template to capture protocol entries
#+BEGIN_SRC emacs-lisp
  (add-to-list
     'org-capture-templates
     '("p"
       "Protocol"
       entry
       (file+olp+datetree "journal.org")
       "* %:description\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%:link\n\n#+begin_quote\n%i\n#+end_quote\n"))
#+END_SRC
** Org babel
Template expansion!
#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src
*** Enable org-babel for some languages
#+begin_src emacs-lisp
  (setq org-babel-load-languages '((emacs-lisp . t)
                                   (python . t)
                                   (sh . t)))

  (require 'ob-emacs-lisp)
  (require 'ob-python)
#+end_src
** Org reveal
#+begin_src emacs-lisp :tangle packages.el
  (package! ox-reveal)
#+end_src
** Org subtree to gist
#+begin_src emacs-lisp :tangle packages.el
  (package! ox-gist
            :recipe (:local-repo "~/code/my-repos/ox-gist"))
#+end_src
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :defer t)
#+END_SRC
*** Markdown toc
#+BEGIN_SRC emacs-lisp
  (use-package markdown-toc :defer t)
#+END_SRC
** Hugo & Blog setup
#+begin_src emacs-lisp
  ;; Copied from newer org-mode since ox-hugo needs it

  (defun org-back-to-heading-or-point-min (&optional invisible-ok)
    "Go back to heading or first point in buffer.
  If point is before first heading go to first point in buffer
  instead of back to heading."
    (condition-case nil
        (outline-back-to-heading invisible-ok)
      (error
       (goto-char (point-min)))))
#+end_src

#+begin_src emacs-lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post."
    (let* ((date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title " :noexport:")
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":EXPORT_DESCRIPTION:"
                   ":EXPORT_HUGO_CUSTOM_FRONT_MATTER:"
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("b"
                 "Blog post for punchagan.muse-amuse.in"
                 entry
                 (file "blog-posts.org")
                 (function org-hugo-new-subtree-post-capture-template)
                 :prepend t))
#+end_src
** Inbox.org (Orgzly) refile
*** Refile single subtree
#+begin_src emacs-lisp
  (defun pc/org-refile-subtree-to-journal ()
    "Refile a subtree to a journal.org datetree corresponding to it's timestamp."
    (interactive)
    (let* ((entry-date (org-entry-get nil "CREATED" t))
           (org-overriding-default-time
            (apply #'encode-time (org-parse-time-string entry-date)))
           (buf (current-buffer)))
      (when entry-date
        (org-cut-subtree)
        ;; Set the continuation position when this function is called from org-map-entries
        (setq org-map-continue-from (point))
        (save-mark-and-excursion
          (org-capture-goto-target "j")
          (org-narrow-to-subtree)
          (org-show-subtree)
          (org-end-of-subtree t)
          (newline)
          (goto-char (point-max))
          (org-paste-subtree 4)
          (widen)
          (save-buffer)
          (switch-to-buffer buf)
          (save-buffer)))))
#+end_src
*** Refile Inbox.org

Refile all the entries in Inbox.org

#+begin_src emacs-lisp
  (defun pc/org-refile-inbox ()
    (interactive)
    (require 'dash)
    (require 's)
    (org-map-entries
     #'pc/org-refile-subtree-to-journal
     nil
     (-filter (lambda (x) (s-contains? "Inbox.org" x)) (org-agenda-files))))
#+end_src
** Org crypt
#+begin_src emacs-lisp
(require 'org-crypt)
#+end_src
** Org bookmarks
#+begin_src emacs-lisp :tangle packages.el
(package! org-bookmark-heading)
#+end_src
#+begin_src emacs-lisp
(after! org
  (require 'org-bookmark-heading))
#+end_src

* COMMENT Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook 'pc/tangle-doom-org nil 'local-to-this-file-please)
# End:
